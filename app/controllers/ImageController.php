<?php

class ImageController extends BaseController
{
	function GetAndSaveImage()
	{
		$message = 'Upload failed!';
		if(Input::hasFile('image') && Input::file('image')->isValid())
		{
			$file = Input::file('image');
			$type = Input::get('type');
			if($type == 'restaurant' && Input::has('restaurants_id'))
			{
				$image = new RestaurantImage;
				$image->restaurants_id = Input::get('restaurants_id');
				$image->imageData = base64_encode(File::get($file));
				$image->save();
				$message = 'Upload successful!';
			}else if($type == 'food' && Input::has('food_instances_id'))
			{
				$food_instances_id = Input::get('food_instances_id');
				$food_instance = food_instance::find($food_instances_id);
				$image = new FoodImage;
				$image->food_instances_id = $food_instances_id;
				$image->food_instances_food_type_id = $food_instance->food_types_id; //TODO this really should be food_types_id, but this is just to match the database..
				$image->food_instances_restaurants_id = $food_instance->restaurants_id;
				$image->imageData = base64_encode(File::get($file));
				$image->save();
				$message = 'Upload successful!';
			}
		}
		return Redirect::to('imgupload')->with('message', $message);
	}
	
	//displays all images of the given type with the given restaurant_id or food_instances_id
	function LoadImage()
	{
		if(Input::has('type'))
		{
			$type = Input::get('type');
			$images = null;
			if($type == 'restaurant' && Input::has('restaurants_id'))
			{
				$images = RestaurantImage::where('restaurants_id', '=', Input::get('restaurants_id'))->get()->toArray();
			}else if($type == 'food' && Input::has('food_instances_id'))
			{
				$images = FoodImage::where('food_instances_id', '=', Input::get('food_instances_id'))->get()->toArray();
			}
			if(!is_null($images))
			{
				foreach($images as $image)
				{
					$id = $image['id'];
					echo "<img src=\"serveImage?type=$type&id=$id\">"; //TODO IS THIS VULNERABLE TO INJECTION? PERHAPS ADD A CLASS TO THESE IMAGES
				}
			}
		}
	}

	//Serves the image with the given id, of the given type (restaurant or food)
	function ServeImage()
	{
		if(Input::has('type') && Input::has('id'))
		{
			$type = Input::get('type');
			$imageRaw = null;
			if($type == 'restaurant')
			{
				$imageRaw = RestaurantImage::find(Input::get('id'))->imageData;
			}else if($type == 'food')
			{
				$imageRaw = FoodImage::find(Input::get('id'))->imageData;
			}
			$image = base64_decode($imageRaw);
			header('Content-Type: image'); //TODO DO WE NEED JPEG/GIF/PNG/ETC?
			echo $image;
			return;
		}
	}

    public static function ServeRestaurantBase64Image($id)
    {
        $restaurantImageQuery = RestaurantImage::where('restaurants_id','=',$id);
        if($restaurantImageQuery->count()!=0){
            return array($restaurantImageQuery->first()->imageType, $restaurantImageQuery->first()->imageData);
        }
        return array('jpg','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'
        );
    }

    public static function ServeFoodBase64Image($id){
        $foodImageQuery = FoodImage::where('food_instances_id','=',$id);
        if($foodImageQuery->count()!=0){
            return array($foodImageQuery->first()->imageType, $foodImageQuery->first()->imageData);
        }
        return array('jpg','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'
        );
    }

    public static function ServeFoodBase64URLs($id){
        $foodImageQuery = FoodImage::where('food_instances_id','=',$id);
        if($foodImageQuery->count()!=0){

            return array($foodImageQuery->first()->imageType, $foodImageQuery->first()->imageData);
        }
        return array('jpg','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'
        );
    }

    public static function createBase64URL($filetype, $base64){
        return 'data:image/'.$filetype.';base64,'.$base64;
    }

    public static function ServeCollectionFoodBase64URLs($id){
        $foodImageQuery = FoodImage::where('food_instances_id','=',$id);
        $URLs = array();
        if($foodImageQuery->count()!=0){
            $foodImageQuery->each(function($foodImageData){
                $imgData = $foodImageData->imageData;
                $URLs[] = ImageController::createBase64URL('', $imgData);
            });
            return $URLs;
        }
        return [];
    }
}